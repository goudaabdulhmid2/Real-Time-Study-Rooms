// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for user roles
enum Role {
  user
  admin
  superAdmin
}

// User model for Clerk integration
model User {
  id          String    @id @default(uuid())
  clerkUserId String    @unique // Clerk's user ID
  name        String
  email       String? // Email is managed by Clerk, may be null if not synced
  avatarUrl   String?
  birthDate   DateTime?
  role        Role      @default(user)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  ownedRooms          Room[]               @relation("UserOwnedRooms")
  roomParticipants    RoomParticipant[]
  messages            Message[]
  whiteboardSnapshots WhiteboardSnapshot[] @relation("SavedSnapshots")
}

// Room model
model Room {
  id        String   @id @default(uuid())
  code      String   @unique
  title     String
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation("UserOwnedRooms", fields: [ownerId], references: [id])
  ownerId String

  // Relationships
  roomParticipants    RoomParticipant[]
  messages            Message[]
  whiteboardSnapshots WhiteboardSnapshot[]
}

// Join table for the many-to-many relationship
model RoomParticipant {
  userId   String
  roomId   String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@id([userId, roomId])
}

// Message model
model Message {
  id          String   @id @default(uuid())
  text        String
  attachments Json?
  timestamp   DateTime @default(now())

  senderId String
  roomId   String

  sender User @relation(fields: [senderId], references: [id])
  room   Room @relation(fields: [roomId], references: [id])
}

// Whiteboard Snapshot model
model WhiteboardSnapshot {
  id        String   @id @default(uuid())
  dataUrl   String
  createdAt DateTime @default(now())

  roomId  String
  savedBy String

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(name: "SavedSnapshots", fields: [savedBy], references: [id]) // Named the relation
}
